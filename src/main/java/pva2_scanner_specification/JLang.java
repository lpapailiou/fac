// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: git/fac/src/main/java/pva2_scanner_specification/jlang.flex

package pva2_scanner_specification;
import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class JLang {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\123\u0100\1\u0a00\4\u0100\1\u1500"+
    "\10\u0100\1\u1600\2\u0100\1\u1700\1\u1800\1\u1400\1\u0100\1\u0500"+
    "\1\u0100\1\u1900\1\u1600\1\u0900\3\u0100\1\u1300\1\u1a00\114\u0100"+
    "\1\u1b00\1\u1300\153\u0100\1\u1c00\11\u0100\1\u1d00\1\u1400\6\u0100"+
    "\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\12\20\1\3\1\21\1\22"+
    "\1\23\1\24\37\0\1\25\1\26\1\0\1\27\1\30"+
    "\1\26\1\31\1\32\1\33\1\34\1\35\1\36\2\26"+
    "\1\37\1\40\1\41\1\42\1\43\1\26\1\44\1\45"+
    "\1\46\1\47\1\26\1\50\3\26\1\51\1\52\1\53"+
    "\7\0\1\3\32\0\1\3\u01bf\0\12\54\206\0\12\54"+
    "\306\0\12\54\234\0\12\54\166\0\12\54\140\0\12\54"+
    "\166\0\12\54\106\0\12\54\u0116\0\12\54\106\0\12\54"+
    "\346\0\1\3\u015f\0\12\54\46\0\12\54\u012c\0\12\54"+
    "\200\0\12\54\246\0\12\54\6\0\12\54\266\0\12\54"+
    "\126\0\12\54\206\0\12\54\6\0\12\54\246\0\13\3"+
    "\35\0\2\3\5\0\1\3\57\0\1\3\240\0\1\3"+
    "\u01cf\0\12\54\46\0\12\54\306\0\12\54\26\0\12\54"+
    "\126\0\12\54\u0196\0\12\54\246\0\12\54\206\0\12\54"+
    "\u012c\0\12\54\200\0\12\54\74\0\12\54\220\0\12\54"+
    "\166\0\12\54\146\0\12\54\206\0\12\54\106\0\12\54"+
    "\266\0\12\54\u0164\0\62\54\100\0\12\54\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7680];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\15\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\0\1\33\1\34\1\35\1\36"+
    "\3\0\1\37\1\40\1\41\4\24\1\42\7\24\1\43"+
    "\2\0\1\3\1\16\1\24\1\44\11\24\1\0\1\3"+
    "\1\24\1\45\4\24\1\46\3\24\1\47\2\24\1\50"+
    "\1\24\1\51\1\52\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\55\0\55\0\u0168\0\u0195\0\55\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\55\0\u02fd\0\u032a\0\u0357"+
    "\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf"+
    "\0\u04ec\0\u0519\0\55\0\u0546\0\55\0\207\0\55\0\55"+
    "\0\u013b\0\55\0\55\0\55\0\55\0\u0573\0\u05a0\0\u05cd"+
    "\0\55\0\55\0\55\0\u05fa\0\u0627\0\u0654\0\u0681\0\u02fd"+
    "\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\55"+
    "\0\u07e9\0\u0816\0\55\0\u05cd\0\u0843\0\u02fd\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u07e9\0\u0a32\0\u02fd\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u02fd"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u02fd\0\u0b9a\0\u0bc7\0\u02fd\0\u0bf4"+
    "\0\u02fd\0\u02fd\0\u02fd\0\u02fd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\2\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\30\1\31\1\32\2\26\1\33\1\26\1\34\1\35"+
    "\1\26\1\36\1\37\1\40\1\41\1\26\1\42\1\43"+
    "\1\44\1\45\1\2\56\0\1\3\1\46\1\0\1\46"+
    "\51\0\2\46\1\0\1\46\51\0\1\46\1\4\1\0"+
    "\1\46\73\0\1\47\37\0\1\50\47\0\4\51\2\0"+
    "\1\52\12\51\4\0\23\51\27\0\1\53\54\0\1\54"+
    "\51\0\1\20\2\0\1\55\43\0\1\56\4\0\1\57"+
    "\3\0\1\53\47\0\1\60\1\0\1\20\33\0\1\20"+
    "\1\0\2\21\1\0\1\21\73\0\1\61\54\0\1\62"+
    "\54\0\1\63\57\0\23\26\32\0\14\26\1\64\6\26"+
    "\32\0\4\26\1\65\16\26\32\0\11\26\1\66\11\26"+
    "\32\0\1\26\1\67\21\26\32\0\5\26\1\70\15\26"+
    "\32\0\1\26\1\71\21\26\32\0\21\26\1\72\1\26"+
    "\32\0\16\26\1\73\4\26\32\0\4\26\1\74\16\26"+
    "\32\0\20\26\1\75\2\26\32\0\16\26\1\76\4\26"+
    "\32\0\7\26\1\77\13\26\56\0\1\100\2\0\12\101"+
    "\1\102\42\101\2\57\1\0\1\57\1\103\50\57\20\0"+
    "\1\104\33\0\1\104\26\0\14\26\1\105\6\26\32\0"+
    "\5\26\1\106\15\26\32\0\17\26\1\107\3\26\32\0"+
    "\11\26\1\110\11\26\32\0\10\26\1\111\12\26\32\0"+
    "\12\26\1\112\10\26\32\0\10\26\1\113\12\26\32\0"+
    "\20\26\1\114\2\26\32\0\16\26\1\115\4\26\32\0"+
    "\21\26\1\116\1\26\32\0\10\26\1\117\12\26\4\0"+
    "\12\101\1\120\54\101\1\120\4\101\1\121\35\101\26\0"+
    "\11\26\1\122\11\26\32\0\4\26\1\70\16\26\32\0"+
    "\17\26\1\116\3\26\32\0\13\26\1\123\7\26\32\0"+
    "\2\26\1\124\20\26\32\0\13\26\1\125\7\26\32\0"+
    "\21\26\1\126\1\26\32\0\10\26\1\127\12\26\32\0"+
    "\4\26\1\130\16\26\32\0\11\26\1\131\11\26\4\0"+
    "\12\101\1\120\4\101\1\103\35\101\26\0\4\26\1\132"+
    "\16\26\32\0\4\26\1\133\16\26\32\0\20\26\1\134"+
    "\2\26\32\0\16\26\1\135\4\26\32\0\13\26\1\136"+
    "\7\26\32\0\4\26\1\137\16\26\32\0\1\26\1\140"+
    "\21\26\32\0\16\26\1\141\4\26\32\0\13\26\1\142"+
    "\7\26\32\0\6\26\1\143\14\26\32\0\13\26\1\144"+
    "\7\26\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3105];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\7\1\1\11"+
    "\15\1\1\11\1\1\1\11\1\1\2\11\1\0\4\11"+
    "\3\0\3\11\14\1\1\11\2\0\1\11\14\1\1\0"+
    "\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private ArrayList<Token> tokenList = new ArrayList<>();

  public JLang(String filename) {
      System.out.println("start reading file " + filename + "...\n");
      String[] argv = new String[] {filename};
      if (argv.length == 0) {
        System.out.println("Usage : java JLang [ --encoding <name> ] <inputfile(s)>");
      }
      else {
        int firstFilePos = 0;
        String encodingName = "UTF-8";
        if (argv[0].equals("--encoding")) {
          firstFilePos = 2;
          encodingName = argv[1];
          try {
            // Side-effect: is encodingName valid?
            java.nio.charset.Charset.forName(encodingName);
          } catch (Exception e) {
            System.out.println("Invalid encoding '" + encodingName + "'");
            return;
          }
        }
        for (int i = firstFilePos; i < argv.length; i++) {
          try {
            java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
            this.zzReader = new java.io.InputStreamReader(stream, encodingName);
            while ( !this.zzAtEOF ) this.yylex();
          }
          catch (java.io.FileNotFoundException e) {
            System.out.println("File not found : \""+argv[i]+"\"");
          }
          catch (java.io.IOException e) {
            System.out.println("IO error scanning file \""+argv[i]+"\"");
            System.out.println(e);
          }
          catch (Exception e) {
            System.out.println("Unexpected exception:");
            e.printStackTrace();
          }
        }
      }
  }

  private void collectToken(String token) {
      tokenList.add(new Token(token, yytext()));
      consolePrint(token);
  }

  private void consolePrint(String value) {
      System.out.println("token {" + value + "}: found match <" + yytext() + "> at line " + yyline + ", column " + yycolumn + ".");
  }

  public ArrayList<Token> getTokenList() {
      return tokenList;
  }

  public ArrayList<String> getTokens() {
      ArrayList<String> list = new ArrayList<>();
      for (Token token : tokenList) {
          list.add(token.name);
      }
      return list;
  }

  public ArrayList<Object> getValues() {
      ArrayList<Object> list = new ArrayList<>();
        for (Token token : tokenList) {
            list.add(token.value);
        }
        return list;
  }

  public void printTokens() {
      System.out.println("\n***** TOKENS *****\n");
      ArrayList<String> tokens = getTokens();
      for (int i = 0; i < tokens.size(); i++) {
          String token = tokens.get(i);
          if (i < tokens.size()-1) {
              token += ", ";
          }
          System.out.print(token);
      }
  }

  public void printValues() {
        System.out.println("\n***** File content *****\n");
        ArrayList<Object> values = getValues();
        for (Object obj : values) {
            System.out.print(obj);
        }
    }

  static class Token {
      String name;
      Object value;
      Token(String name, Object value) {
          this.name = name;
          this.value = value;
      }
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JLang(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    System.out.println("\n\n...end of file reached at line " + yyline + ", column " + yycolumn + ".\n");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 45: break;
          case 2:
            { collectToken("SPACE");
            }
            // fall through
          case 46: break;
          case 3:
            { /* ignore */
            }
            // fall through
          case 47: break;
          case 4:
            { collectToken("EXCL");
            }
            // fall through
          case 48: break;
          case 5:
            { collectToken("ND");
            }
            // fall through
          case 49: break;
          case 6:
            { collectToken("APO");
            }
            // fall through
          case 50: break;
          case 7:
            { collectToken("BL");
            }
            // fall through
          case 51: break;
          case 8:
            { collectToken("BR");
            }
            // fall through
          case 52: break;
          case 9:
            { collectToken("MUL");
            }
            // fall through
          case 53: break;
          case 10:
            { collectToken("PLUS");
            }
            // fall through
          case 54: break;
          case 11:
            { collectToken("COMMA");
            }
            // fall through
          case 55: break;
          case 12:
            { collectToken("MINUS");
            }
            // fall through
          case 56: break;
          case 13:
            { collectToken("DIV");
            }
            // fall through
          case 57: break;
          case 14:
            { collectToken("N");
            }
            // fall through
          case 58: break;
          case 15:
            { collectToken("STOP");
            }
            // fall through
          case 59: break;
          case 16:
            { collectToken("LESS");
            }
            // fall through
          case 60: break;
          case 17:
            { collectToken("EQUAL");
            }
            // fall through
          case 61: break;
          case 18:
            { collectToken("GREATER");
            }
            // fall through
          case 62: break;
          case 19:
            { throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 63: break;
          case 20:
            { collectToken("STR");
            }
            // fall through
          case 64: break;
          case 21:
            { collectToken("CBL");
            }
            // fall through
          case 65: break;
          case 22:
            { collectToken("RR");
            }
            // fall through
          case 66: break;
          case 23:
            { collectToken("CBR");
            }
            // fall through
          case 67: break;
          case 24:
            { collectToken("NL_SPACE");
            }
            // fall through
          case 68: break;
          case 25:
            { collectToken("NEQ");
            }
            // fall through
          case 69: break;
          case 26:
            { collectToken("AND");
            }
            // fall through
          case 70: break;
          case 27:
            { collectToken("W");
            }
            // fall through
          case 71: break;
          case 28:
            { collectToken("MULEQ");
            }
            // fall through
          case 72: break;
          case 29:
            { collectToken("PLUSEQ");
            }
            // fall through
          case 73: break;
          case 30:
            { collectToken("MINEQ");
            }
            // fall through
          case 74: break;
          case 31:
            { collectToken("LEQ");
            }
            // fall through
          case 75: break;
          case 32:
            { collectToken("EQ");
            }
            // fall through
          case 76: break;
          case 33:
            { collectToken("GREQ");
            }
            // fall through
          case 77: break;
          case 34:
            { collectToken("IF");
            }
            // fall through
          case 78: break;
          case 35:
            { collectToken("OR");
            }
            // fall through
          case 79: break;
          case 36:
            { collectToken("DEF");
            }
            // fall through
          case 80: break;
          case 37:
            { collectToken("MAIN");
            }
            // fall through
          case 81: break;
          case 38:
            { collectToken("BOOL");
            }
            // fall through
          case 82: break;
          case 39:
            { collectToken("PRINT");
            }
            // fall through
          case 83: break;
          case 40:
            { collectToken("WHILE");
            }
            // fall through
          case 84: break;
          case 41:
            { collectToken("NUMTYPE");
            }
            // fall through
          case 85: break;
          case 42:
            { collectToken("RETURN");
            }
            // fall through
          case 86: break;
          case 43:
            { collectToken("STRTYPE");
            }
            // fall through
          case 87: break;
          case 44:
            { collectToken("BOOLTYPE");
            }
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java JLang [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        JLang scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new JLang(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
