
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import parser.util.Declaration;
import parser.util.Program;
import scanner.JScanner;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public JParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\017\004\000\002\020" +
    "\004\000\002\020\002\000\002\021\004\000\002\021\002" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\003\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\012\002\ufffc\042\010\044\006\046\007\001" +
    "\002\000\004\002\031\001\002\000\004\002\ufffe\001\002" +
    "\000\004\047\023\001\002\000\004\047\017\001\002\000" +
    "\004\047\013\001\002\000\012\002\ufffc\042\010\044\006" +
    "\046\007\001\002\000\004\002\ufffd\001\002\000\004\020" +
    "\014\001\002\000\004\041\015\001\002\000\004\017\016" +
    "\001\002\000\012\002\ufffb\042\ufffb\044\ufffb\046\ufffb\001" +
    "\002\000\004\020\020\001\002\000\004\045\021\001\002" +
    "\000\004\017\022\001\002\000\012\002\ufff9\042\ufff9\044" +
    "\ufff9\046\ufff9\001\002\000\004\020\024\001\002\000\004" +
    "\043\025\001\002\000\004\017\026\001\002\000\012\002" +
    "\ufffa\042\ufffa\044\ufffa\046\ufffa\001\002\000\004\002\000" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\010\015\010\017\003\021\004\001\001\000" +
    "\002\001\001\000\004\020\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\010\021" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\027\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JParser$actions {
  private final JParser parser;

  /** Constructor */
  CUP$JParser$actions(JParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action_part00000000(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JParser$result;

      /* select the action based on the action number */
      switch (CUP$JParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		RESULT = start_val;
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JParser$parser.done_parsing();
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decllist stmtlist 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		List<Declaration> d = (List<Declaration>)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		List<Object> s = (List<Object>)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = new Program(d, s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("program",13, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtlist ::= stmtlist STMT 
            {
              List<Object> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		List<Object> sl = (List<Object>)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("stmtlist",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtlist ::= 
            {
              List<Object> RESULT =null;
		 RESULT = new LinkedList<Object>(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("stmtlist",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decllist ::= DECL decllist 
            {
              List<Declaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		List<Declaration> dl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 dl.add((Declaration)d); RESULT = dl; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("decllist",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decllist ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<Declaration>(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("decllist",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= STRTYPE VAR EQUAL STR STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= NUMTYPE VAR EQUAL NUM STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= BOOLTYPE VAR EQUAL BOOL STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TYPE ::= STRTYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("TYPE",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TYPE ::= NUMTYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("TYPE",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= BOOLTYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("TYPE",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
              return CUP$JParser$do_action_part00000000(
                               CUP$JParser$act_num,
                               CUP$JParser$parser,
                               CUP$JParser$stack,
                               CUP$JParser$top);
    }
}

}
