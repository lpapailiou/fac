
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import scanner.JScanner;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\021\004\000\002\002\004\000\002\021" +
    "\002\000\002\014\003\000\002\014\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\007\000\002\014\013\000" +
    "\002\014\007\000\002\014\003\000\002\024\003\000\002" +
    "\024\005\000\002\024\005\000\002\025\003\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\022\005" +
    "\000\002\022\007\000\002\022\007\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\007\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\007\000\002\027\005" +
    "\000\002\002\006\000\002\002\006\000\002\002\006\000" +
    "\002\002\006\000\002\002\006\000\002\002\006\000\002" +
    "\002\006\000\002\002\006\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\026\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\012\002\uffff\043\005\045\006\047\007\001" +
    "\002\000\004\002\026\001\002\000\004\041\022\001\002" +
    "\000\004\041\016\001\002\000\004\041\012\001\002\000" +
    "\012\002\uffff\043\005\045\006\047\007\001\002\000\004" +
    "\002\001\001\002\000\004\020\013\001\002\000\004\046" +
    "\014\001\002\000\004\017\015\001\002\000\012\002\uffd9" +
    "\043\uffd9\045\uffd9\047\uffd9\001\002\000\004\020\017\001" +
    "\002\000\004\044\020\001\002\000\004\017\021\001\002" +
    "\000\012\002\uffd8\043\uffd8\045\uffd8\047\uffd8\001\002\000" +
    "\004\020\023\001\002\000\004\042\024\001\002\000\004" +
    "\017\025\001\002\000\012\002\uffd7\043\uffd7\045\uffd7\047" +
    "\uffd7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\006\015\007\021\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\007\021\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }



    JScanner s;
    JParser(JScanner s) {
        this.s = s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JParser$actions {
  private final JParser parser;

  /** Constructor */
  CUP$JParser$actions(JParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action_part00000000(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JParser$result;

      /* select the action based on the action number */
      switch (CUP$JParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // decllist ::= DECL decllist 
            {
              HashMap<Object,Object> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		HashMap<Object,Object> dl = (HashMap<Object,Object>)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("decllist",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= decllist EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		HashMap<Object,Object> start_val = (HashMap<Object,Object>)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		RESULT = start_val;
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JParser$parser.done_parsing();
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decllist ::= 
            {
              HashMap<Object,Object> RESULT =null;
		 RESULT = new LinkedList<Declaration>(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("decllist",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STMT ::= STOP 
            {
              Object RESULT =null;
		 RESULT = Stmt.empty(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STMT ::= CBL stmtlist CBR 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		List<Object> sl = (List<Object>)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Stmt.compound(sl); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STMT ::= ASSIGN 
            {
              Object RESULT =null;
		 System.out.println("STRUCT"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STMT ::= DECL 
            {
              Object RESULT =null;
		 System.out.println("STRUCT"); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STMT ::= IF COND CBL STMT CBR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 Stmt.ifthen(c, s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STMT ::= IF COND CBL STMT CBR ELSE CBL STMT CBR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 Stmt.ifthenelse(c, s1, s2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-8)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STMT ::= WHILE COND CBL STMT CBR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 Stmt.whileloop(c, s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STMT ::= PRINTCALL 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 System.out.println(p); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPR ::= CALC_MUL 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("EXPR",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPR ::= EXPR PLUS CALC_MUL 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("EXPR",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPR ::= EXPR MINUS CALC_MUL 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("EXPR",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CALC_MUL ::= NUM_VAL 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CALC_MUL ::= BL CALC_MUL BR 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CALC_MUL ::= CALC_MUL MUL NUM_VAL 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CALC_MUL ::= CALC_MUL DIV NUM_VAL 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COND ::= BL VAR BR 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COND ::= BL BOOL_VAL AND BOOL_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 && e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COND ::= BL BOOL_VAL OR BOOL_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 || e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COND ::= BL BOOL_VAL EQ BOOL_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 == e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COND ::= BL BOOL_VAL NEQ BOOL_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 != e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COND ::= BL NUM_VAL EQ NUM_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 == e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COND ::= BL NUM_VAL NEQ NUM_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 != e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COND ::= BL NUM_VAL GREATER NUM_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 > e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COND ::= BL NUM_VAL GREQ NUM_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 >= e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COND ::= BL NUM_VAL LEQ NUM_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 <= e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COND ::= BL NUM_VAL LESS NUM_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 < e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COND ::= BL STR_VAL EQ STR_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 == e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COND ::= BL STR_VAL NEQ STR_VAL BR 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = e1 != e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONCAT ::= STR_VAL PLUS STR_VAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CONCAT",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASSIGN ::= VAR EQ BOOL_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 == e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASSIGN ::= VAR EQ NUM_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 == e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASSIGN ::= VAR PLUSEQ NUM_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 += e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASSIGN ::= VAR MINEQ NUM_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 -= e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASSIGN ::= VAR DIVEQ NUM_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 /= e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASSIGN ::= VAR MULEQ NUM_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 *= e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASSIGN ::= VAR EQ STR_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 == e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASSIGN ::= VAR PLUSEQ STR_VAL STOP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 e1 += e2; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECL ::= STRTYPE VAR EQUAL STR STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECL ::= NUMTYPE VAR EQUAL NUM STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECL ::= BOOLTYPE VAR EQUAL BOOL STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NUM_VAL ::= VAR 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Double.valueOf(n); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NUM_VAL ::= BL EXPR BR 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = n; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NUM_VAL ::= BL NUM_VAL BR 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = n; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NUM_VAL ::= NUM 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = n; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BOOL_VAL ::= VAR 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Boolean.valueOf(b); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("BOOL_VAL",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOOL_VAL ::= COND 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("BOOL_VAL",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOOL_VAL ::= BOOL 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("BOOL_VAL",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STR_VAL ::= VAR 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str.toString(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STR_VAL",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STR_VAL ::= CONCAT 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STR_VAL",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STR_VAL ::= STR 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STR_VAL",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
              return CUP$JParser$do_action_part00000000(
                               CUP$JParser$act_num,
                               CUP$JParser$parser,
                               CUP$JParser$stack,
                               CUP$JParser$top);
    }
}

}
