
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import parser.util.Program;
import parser.util.Declaration;
import parser.util.Statement;
import parser.util.BinaryStatement;
import parser.util.BINOP.*;
import scanner.JScanner;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public JParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\021\004\000\002\022" +
    "\004\000\002\022\002\000\002\023\004\000\002\023\002" +
    "\000\002\014\004\000\002\017\005\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\030\003\000\002" +
    "\030\005\000\002\030\005\000\002\030\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\016\002\ufffc\041\ufffc\042\010\044\006\046" +
    "\007\047\ufffc\001\002\000\004\002\041\001\002\000\010" +
    "\002\ufffe\041\ufffe\047\ufffe\001\002\000\004\047\023\001" +
    "\002\000\004\047\017\001\002\000\004\047\013\001\002" +
    "\000\016\002\ufffc\041\ufffc\042\010\044\006\046\007\047" +
    "\ufffc\001\002\000\010\002\ufffd\041\ufffd\047\ufffd\001\002" +
    "\000\004\020\014\001\002\000\004\041\015\001\002\000" +
    "\004\017\016\001\002\000\016\002\ufff9\041\ufff9\042\ufff9" +
    "\044\ufff9\046\ufff9\047\ufff9\001\002\000\004\020\020\001" +
    "\002\000\004\045\021\001\002\000\004\017\022\001\002" +
    "\000\016\002\ufff7\041\ufff7\042\ufff7\044\ufff7\046\ufff7\047" +
    "\ufff7\001\002\000\004\020\024\001\002\000\004\043\025" +
    "\001\002\000\004\017\026\001\002\000\016\002\ufff8\041" +
    "\ufff8\042\ufff8\044\ufff8\046\ufff8\047\ufff8\001\002\000\010" +
    "\002\000\041\034\047\030\001\002\000\006\017\uffef\023" +
    "\uffef\001\002\000\010\002\uffff\041\uffff\047\uffff\001\002" +
    "\000\004\023\036\001\002\000\006\017\035\023\uffee\001" +
    "\002\000\006\017\uffed\023\uffed\001\002\000\010\002\ufffb" +
    "\041\ufffb\047\ufffb\001\002\000\006\041\034\047\030\001" +
    "\002\000\006\017\ufffa\023\ufffa\001\002\000\006\017\uffee" +
    "\023\uffee\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\010\015\010\021\003\023\004\001\001\000" +
    "\002\001\001\000\004\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\010\023" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\030\017\032\020\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\037\020\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JParser$actions {
  private final JParser parser;

  /** Constructor */
  CUP$JParser$actions(JParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action_part00000000(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JParser$result;

      /* select the action based on the action number */
      switch (CUP$JParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		RESULT = start_val;
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JParser$parser.done_parsing();
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decllist stmtlist 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		List<Declaration> d = (List<Declaration>)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = new Program(d, s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("program",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtlist ::= stmtlist STMT 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 sl.add((Statement) s); RESULT = sl; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("stmtlist",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtlist ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("stmtlist",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decllist ::= DECL decllist 
            {
              List<Declaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		List<Declaration> dl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 dl.add((Declaration)d); RESULT = dl; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("decllist",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decllist ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<Declaration>(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("decllist",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STMT ::= CONCAT STOP 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONCAT ::= STR_VAL PLUS STR_VAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = (Statement) new BinaryStatement("CONCAT", e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CONCAT",13, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= STRTYPE VAR EQUAL STR STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL ::= NUMTYPE VAR EQUAL NUM STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL ::= BOOLTYPE VAR EQUAL BOOL STOP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = new Declaration(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NUM_VAL ::= VAR 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Double.valueOf(n); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NUM_VAL ::= BL EXPR BR 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = n; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NUM_VAL ::= BL NUM_VAL BR 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = n; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NUM_VAL ::= NUM 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = n; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NUM_VAL",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BOOL_VAL ::= VAR 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Boolean.valueOf(b); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("BOOL_VAL",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BOOL_VAL ::= COND 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("BOOL_VAL",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BOOL_VAL ::= BOOL 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("BOOL_VAL",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STR_VAL ::= VAR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str.toString(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STR_VAL",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STR_VAL ::= CONCAT 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STR_VAL",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STR_VAL ::= STR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STR_VAL",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
              return CUP$JParser$do_action_part00000000(
                               CUP$JParser$act_num,
                               CUP$JParser$parser,
                               CUP$JParser$stack,
                               CUP$JParser$top);
    }
}

}
