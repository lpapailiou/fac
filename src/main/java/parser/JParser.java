
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import parser.parsetree.*;
import scanner.JScanner;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public JParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\013\003\000\002\014" +
    "\004\000\002\014\002\000\002\017\003\000\002\017\003" +
    "\000\002\020\003\000\002\020\004\000\002\016\003\000" +
    "\002\016\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\030\007\000\002\030\006\000\002\027\007" +
    "\000\002\027\006\000\002\027\013\000\002\027\012\000" +
    "\002\027\012\000\002\027\011\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\025\014\000\002\025" +
    "\013\000\002\025\013\000\002\025\012\000\002\004\004" +
    "\000\002\004\006\000\002\003\003\000\002\003\005\000" +
    "\002\005\005\000\002\024\006\000\002\024\005\000\002" +
    "\026\007\000\002\026\005\000\002\026\007\000\002\026" +
    "\006\000\002\023\007\000\002\023\007\000\002\023\007" +
    "\000\002\023\007\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\011\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\021\006\000\002\021\006\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\031\007" +
    "\000\002\031\005\000\002\031\007\000\002\031\005\000" +
    "\002\031\007\000\002\031\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\024\002\ufffe\004\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\043\ufffe\045\ufffe\047\ufffe\050\ufffe\001\002\000\024" +
    "\002\000\004\007\005\022\007\025\010\026\043\014\045" +
    "\017\047\015\050\021\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\004\013\162\001\002\000" +
    "\024\002\ufffd\004\ufffd\005\ufffd\007\ufffd\010\ufffd\043\ufffd" +
    "\045\ufffd\047\ufffd\050\ufffd\001\002\000\032\002\ufff2\004" +
    "\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\016\ufff2" +
    "\043\ufff2\045\ufff2\047\ufff2\050\ufff2\001\002\000\032\002" +
    "\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\016\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3\001\002\000" +
    "\004\020\250\001\002\000\004\050\243\001\002\000\004" +
    "\050\236\001\002\000\024\002\uffff\004\uffff\005\uffff\007" +
    "\uffff\010\uffff\043\uffff\045\uffff\047\uffff\050\uffff\001\002" +
    "\000\004\050\231\001\002\000\024\002\ufffc\004\ufffc\005" +
    "\ufffc\007\ufffc\010\ufffc\043\ufffc\045\ufffc\047\ufffc\050\ufffc" +
    "\001\002\000\016\013\107\021\212\036\210\037\214\040" +
    "\211\041\207\001\002\000\004\013\162\001\002\000\032" +
    "\002\ufff7\004\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\016\ufff7\043\ufff7\045\ufff7\047\ufff7\050\ufff7\001\002" +
    "\000\032\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\016\ufff6\043\ufff6\045\ufff6\047\ufff6\050\ufff6" +
    "\001\002\000\010\043\123\045\121\047\122\001\002\000" +
    "\004\013\030\001\002\000\032\002\ufff4\004\ufff4\005\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\016\ufff4\043\ufff4\045" +
    "\ufff4\047\ufff4\050\ufff4\001\002\000\016\013\043\014\037" +
    "\042\036\044\033\046\034\050\040\001\002\000\004\020" +
    "\032\001\002\000\032\002\uffda\004\uffda\005\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\016\uffda\043\uffda\045\uffda\047" +
    "\uffda\050\uffda\001\002\000\040\014\uffaf\017\uffaf\020\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\001\002" +
    "\000\040\014\uffb0\017\uffb0\020\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\001\002\000\004\014\117\001" +
    "\002\000\040\014\uffb1\017\uffb1\020\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\001\002\000\004\020\116" +
    "\001\002\000\040\013\107\014\uffb2\020\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\001\002\000\022\022" +
    "\060\023\054\030\056\031\055\032\061\033\063\034\053" +
    "\035\062\001\002\000\010\014\075\024\074\025\076\001" +
    "\002\000\014\013\043\042\036\044\033\046\034\050\050" +
    "\001\002\000\034\014\uffc8\022\060\023\054\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\056\031\055\032\061\033\063" +
    "\034\053\035\062\001\002\000\016\014\uffcb\020\uffcb\024" +
    "\uffcb\025\uffcb\026\046\027\047\001\002\000\012\042\036" +
    "\044\033\046\034\050\050\001\002\000\012\042\036\044" +
    "\033\046\034\050\050\001\002\000\040\014\uffb2\017\uffb2" +
    "\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\001\002\000\016\014\uffc5\020\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\001\002\000\016\014\uffc6\020\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\001\002\000\014\013\uffd3\042" +
    "\uffd3\044\uffd3\046\uffd3\050\uffd3\001\002\000\014\013\uffcf" +
    "\042\uffcf\044\uffcf\046\uffcf\050\uffcf\001\002\000\014\013" +
    "\uffd0\042\uffd0\044\uffd0\046\uffd0\050\uffd0\001\002\000\014" +
    "\013\uffd1\042\uffd1\044\uffd1\046\uffd1\050\uffd1\001\002\000" +
    "\014\013\064\042\036\044\033\046\034\050\050\001\002" +
    "\000\014\013\uffcc\042\uffcc\044\uffcc\046\uffcc\050\uffcc\001" +
    "\002\000\014\013\uffce\042\uffce\044\uffce\046\uffce\050\uffce" +
    "\001\002\000\014\013\uffd2\042\uffd2\044\uffd2\046\uffd2\050" +
    "\uffd2\001\002\000\014\013\uffcd\042\uffcd\044\uffcd\046\uffcd" +
    "\050\uffcd\001\002\000\014\013\064\042\036\044\033\046" +
    "\034\050\050\001\002\000\004\014\070\001\002\000\004" +
    "\014\067\001\002\000\030\014\uffd5\015\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\001\002\000\030\014\uffd4\015\uffd4\020\uffd4\022" +
    "\uffd4\023\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\001\002\000\022\022\060\023\054\030\056\031" +
    "\055\032\061\033\063\034\053\035\062\001\002\000\010" +
    "\014\073\026\046\027\047\001\002\000\016\014\uffc7\020" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\001\002\000\012" +
    "\042\036\044\033\046\034\050\050\001\002\000\004\020" +
    "\100\001\002\000\012\042\036\044\033\046\034\050\050" +
    "\001\002\000\012\014\uffc9\020\uffc9\024\uffc9\025\uffc9\001" +
    "\002\000\032\002\uffdb\004\uffdb\005\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\016\uffdb\043\uffdb\045\uffdb\047\uffdb\050" +
    "\uffdb\001\002\000\012\014\uffca\020\uffca\024\uffca\025\uffca" +
    "\001\002\000\014\013\064\042\036\044\033\046\034\050" +
    "\050\001\002\000\004\014\106\001\002\000\004\014\105" +
    "\001\002\000\030\014\uffd7\015\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\001\002\000\030\014\uffd6\015\uffd6\020\uffd6\022\uffd6\023" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\001\002\000\014\014\110\042\036\044\033\046\034\050" +
    "\050\001\002\000\006\014\uffdc\020\uffdc\001\002\000\006" +
    "\014\uffe0\017\114\001\002\000\004\014\113\001\002\000" +
    "\006\014\uffdd\020\uffdd\001\002\000\012\042\036\044\033" +
    "\046\034\050\050\001\002\000\004\014\uffdf\001\002\000" +
    "\032\002\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\016\uffd8\043\uffd8\045\uffd8\047\uffd8\050\uffd8\001" +
    "\002\000\004\020\120\001\002\000\032\002\uffd9\004\uffd9" +
    "\005\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\016\uffd9\043" +
    "\uffd9\045\uffd9\047\uffd9\050\uffd9\001\002\000\004\050\uffb4" +
    "\001\002\000\004\050\uffb3\001\002\000\004\050\uffb5\001" +
    "\002\000\004\050\125\001\002\000\004\013\126\001\002" +
    "\000\012\014\130\043\123\045\121\047\122\001\002\000" +
    "\004\014\153\001\002\000\004\015\135\001\002\000\004" +
    "\050\132\001\002\000\006\014\uffe2\017\133\001\002\000" +
    "\010\043\123\045\121\047\122\001\002\000\004\014\uffe1" +
    "\001\002\000\024\004\007\005\022\010\026\011\142\012" +
    "\141\043\014\045\017\047\015\050\021\001\002\000\004" +
    "\016\152\001\002\000\004\012\141\001\002\000\026\004" +
    "\ufff9\005\ufff9\010\ufff9\011\ufff9\012\ufff9\016\ufff9\043\ufff9" +
    "\045\ufff9\047\ufff9\050\ufff9\001\002\000\012\042\036\044" +
    "\033\046\034\050\050\001\002\000\004\020\145\001\002" +
    "\000\026\004\007\005\022\010\026\011\142\012\ufffb\016" +
    "\ufffb\043\014\045\017\047\015\050\021\001\002\000\006" +
    "\012\ufffa\016\ufffa\001\002\000\026\004\ufff8\005\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\016\ufff8\043\ufff8\045\ufff8\047\ufff8" +
    "\050\ufff8\001\002\000\004\020\147\001\002\000\004\016" +
    "\uffde\001\002\000\004\016\151\001\002\000\024\002\uffe4" +
    "\004\uffe4\005\uffe4\007\uffe4\010\uffe4\043\uffe4\045\uffe4\047" +
    "\uffe4\050\uffe4\001\002\000\024\002\uffe3\004\uffe3\005\uffe3" +
    "\007\uffe3\010\uffe3\043\uffe3\045\uffe3\047\uffe3\050\uffe3\001" +
    "\002\000\004\015\154\001\002\000\024\004\007\005\022" +
    "\010\026\011\142\012\141\043\014\045\017\047\015\050" +
    "\021\001\002\000\004\016\161\001\002\000\004\012\141" +
    "\001\002\000\004\016\160\001\002\000\024\002\uffe6\004" +
    "\uffe6\005\uffe6\007\uffe6\010\uffe6\043\uffe6\045\uffe6\047\uffe6" +
    "\050\uffe6\001\002\000\024\002\uffe5\004\uffe5\005\uffe5\007" +
    "\uffe5\010\uffe5\043\uffe5\045\uffe5\047\uffe5\050\uffe5\001\002" +
    "\000\014\013\064\042\036\044\033\046\204\050\203\001" +
    "\002\000\004\015\165\001\002\000\004\015\uffe9\001\002" +
    "\000\024\004\007\005\022\010\026\011\142\016\167\043" +
    "\014\045\017\047\015\050\021\001\002\000\004\016\175" +
    "\001\002\000\034\002\uffee\004\uffee\005\uffee\006\170\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\016\uffee\043\uffee\045\uffee" +
    "\047\uffee\050\uffee\001\002\000\004\015\171\001\002\000" +
    "\024\004\007\005\022\010\026\011\142\016\173\043\014" +
    "\045\017\047\015\050\021\001\002\000\004\016\174\001" +
    "\002\000\032\002\uffea\004\uffea\005\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\016\uffea\043\uffea\045\uffea\047\uffea\050" +
    "\uffea\001\002\000\032\002\uffec\004\uffec\005\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\016\uffec\043\uffec\045\uffec\047" +
    "\uffec\050\uffec\001\002\000\034\002\uffef\004\uffef\005\uffef" +
    "\006\176\007\uffef\010\uffef\011\uffef\012\uffef\016\uffef\043" +
    "\uffef\045\uffef\047\uffef\050\uffef\001\002\000\004\015\177" +
    "\001\002\000\024\004\007\005\022\010\026\011\142\016" +
    "\201\043\014\045\017\047\015\050\021\001\002\000\004" +
    "\016\202\001\002\000\032\002\uffeb\004\uffeb\005\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\016\uffeb\043\uffeb\045\uffeb" +
    "\047\uffeb\050\uffeb\001\002\000\032\002\uffed\004\uffed\005" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\016\uffed\043\uffed" +
    "\045\uffed\047\uffed\050\uffed\001\002\000\024\014\206\022" +
    "\uffb2\023\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\001\002\000\024\014\205\022\uffb0\023\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\001\002" +
    "\000\004\015\uffe7\001\002\000\004\015\uffe8\001\002\000" +
    "\014\013\uffbd\042\uffbd\044\uffbd\046\uffbd\050\uffbd\001\002" +
    "\000\014\013\uffbf\042\uffbf\044\uffbf\046\uffbf\050\uffbf\001" +
    "\002\000\014\013\uffbc\042\uffbc\044\uffbc\046\uffbc\050\uffbc" +
    "\001\002\000\014\013\043\042\036\044\033\046\034\050" +
    "\040\001\002\000\014\013\216\042\036\044\033\046\034" +
    "\050\040\001\002\000\014\013\uffbe\042\uffbe\044\uffbe\046" +
    "\uffbe\050\uffbe\001\002\000\004\020\222\001\002\000\014" +
    "\013\216\042\036\044\033\046\034\050\050\001\002\000" +
    "\010\020\221\024\074\025\076\001\002\000\016\014\uffc8" +
    "\020\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\001\002\000" +
    "\032\002\uffc1\004\uffc1\005\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\016\uffc1\043\uffc1\045\uffc1\047\uffc1\050\uffc1\001" +
    "\002\000\032\002\uffc0\004\uffc0\005\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\016\uffc0\043\uffc0\045\uffc0\047\uffc0\050" +
    "\uffc0\001\002\000\004\020\230\001\002\000\004\020\227" +
    "\001\002\000\010\020\226\024\074\025\076\001\002\000" +
    "\032\002\uffc4\004\uffc4\005\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\016\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4\001" +
    "\002\000\032\002\uffc2\004\uffc2\005\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\016\uffc2\043\uffc2\045\uffc2\047\uffc2\050" +
    "\uffc2\001\002\000\032\002\uffc3\004\uffc3\005\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\016\uffc3\043\uffc3\045\uffc3\047" +
    "\uffc3\050\uffc3\001\002\000\006\020\233\021\232\001\002" +
    "\000\004\044\234\001\002\000\032\002\uffb8\004\uffb8\005" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\016\uffb8\043\uffb8" +
    "\045\uffb8\047\uffb8\050\uffb8\001\002\000\004\020\235\001" +
    "\002\000\032\002\uffb9\004\uffb9\005\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\016\uffb9\043\uffb9\045\uffb9\047\uffb9\050" +
    "\uffb9\001\002\000\006\020\240\021\237\001\002\000\004" +
    "\046\241\001\002\000\032\002\uffb6\004\uffb6\005\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\016\uffb6\043\uffb6\045\uffb6" +
    "\047\uffb6\050\uffb6\001\002\000\004\020\242\001\002\000" +
    "\032\002\uffb7\004\uffb7\005\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\016\uffb7\043\uffb7\045\uffb7\047\uffb7\050\uffb7\001" +
    "\002\000\006\020\245\021\244\001\002\000\004\042\246" +
    "\001\002\000\032\002\uffba\004\uffba\005\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\016\uffba\043\uffba\045\uffba\047\uffba" +
    "\050\uffba\001\002\000\004\020\247\001\002\000\032\002" +
    "\uffbb\004\uffbb\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\016\uffbb\043\uffbb\045\uffbb\047\uffbb\050\uffbb\001\002\000" +
    "\032\002\ufff5\004\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\016\ufff5\043\ufff5\045\ufff5\047\ufff5\050\ufff5\001" +
    "\002\000\004\015\252\001\002\000\024\004\007\005\022" +
    "\010\026\011\142\016\254\043\014\045\017\047\015\050" +
    "\021\001\002\000\004\016\255\001\002\000\032\002\ufff0" +
    "\004\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\016" +
    "\ufff0\043\ufff0\045\ufff0\047\ufff0\050\ufff0\001\002\000\032" +
    "\002\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\016\ufff1\043\ufff1\045\ufff1\047\ufff1\050\ufff1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\013\004\014\003\001\001\000\024\015" +
    "\007\017\015\021\023\024\012\025\017\026\026\027\011" +
    "\030\010\031\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\250\023\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\212\001\001\000" +
    "\006\010\162\023\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\123\001\001\000\004\023\030\001" +
    "\001\000\002\001\001\000\014\011\044\012\043\022\041" +
    "\023\040\024\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\101\001\001\000\002\001\001\000\010\011\071" +
    "\012\043\023\040\001\001\000\004\006\056\001\001\000" +
    "\002\001\001\000\004\012\051\001\001\000\004\012\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\064\023\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\070\023\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\100\001\001\000\002\001\001\000\004" +
    "\012\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\102\023\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\111\012\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\114\012\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\130\004\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\130\004\133\001\001\000\002\001" +
    "\001\000\026\005\135\015\137\016\142\020\136\021\023" +
    "\024\012\026\026\027\011\030\010\031\022\001\001\000" +
    "\002\001\001\000\004\005\147\001\001\000\002\001\001" +
    "\000\004\012\145\001\001\000\002\001\001\000\024\015" +
    "\137\016\142\020\143\021\023\024\012\026\026\027\011" +
    "\030\010\031\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\154\015\137\016\142\020\155\021\023\024\012" +
    "\026\026\027\011\030\010\031\022\001\001\000\002\001" +
    "\001\000\004\005\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\070\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\137" +
    "\016\142\020\165\021\023\024\012\026\026\027\011\030" +
    "\010\031\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\015\137\016\142\020\171\021" +
    "\023\024\012\026\026\027\011\030\010\031\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\137\016\142" +
    "\020\177\021\023\024\012\026\026\027\011\030\010\031" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\044\012\217\022\224\023" +
    "\223\024\222\001\001\000\012\011\044\012\217\022\216" +
    "\024\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\071\012\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\015\137\016\142\020\252\021\023\024\012\026\026\027" +
    "\011\030\010\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JParser$actions {
  private final JParser parser;

  /** Constructor */
  CUP$JParser$actions(JParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action_part00000000(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JParser$result;

      /* select the action based on the action number */
      switch (CUP$JParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		RESULT = start_val;
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JParser$parser.done_parsing();
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= STMT_LIST 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.prog(s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",9, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STMT_LIST ::= STMT_LIST PROG_STMT 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 sl.add((Statement) s); RESULT = sl; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT_LIST",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STMT_LIST ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = Statement.stmtList(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT_LIST",10, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROG_STMT ::= STMT 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PROG_STMT",13, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROG_STMT ::= FUNDEF 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		FunctionDefStatement st = (FunctionDefStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PROG_STMT",13, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NEST_STMT ::= LOOP_STMT 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.nest(st); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NEST_STMT",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NEST_STMT ::= LOOP_STMT NEST_STMT 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int stListleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stListright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Statement stList = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.nest(st, stList); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("NEST_STMT",14, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LOOP_STMT ::= STMT 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("LOOP_STMT",12, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LOOP_STMT ::= BREAK STOP 
            {
              Statement RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.brk(); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("LOOP_STMT",12, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STMT ::= DECL 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		VariableDeclaration st = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STMT ::= ASSIGN 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		AssignmentStatement st = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STMT ::= FUNCALL STOP 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		FunctionCallStatement st = (FunctionCallStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STMT ::= PRINTCALL 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		PrintCallStatement st = (PrintCallStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STMT ::= IFTHEN_STMT 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		IfThenStatement st = (IfThenStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STMT ::= WHILE_STMT 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		WhileStatement st = (WhileStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = st; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("STMT",11, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // WHILE_STMT ::= WHILE COND_VAL CBL NEST_STMT CBR 
            {
              WhileStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.loop(c, s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WHILE_STMT ::= WHILE COND_VAL CBL CBR 
            {
              WhileStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		 RESULT = Statement.loop(c, null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",22, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IFTHEN_STMT ::= IF COND_VAL CBL NEST_STMT CBR 
            {
              IfThenStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.ifThen(c, s); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("IFTHEN_STMT",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IFTHEN_STMT ::= IF COND_VAL CBL CBR 
            {
              IfThenStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		 RESULT = Statement.ifThen(c, null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("IFTHEN_STMT",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IFTHEN_STMT ::= IF COND_VAL CBL NEST_STMT CBR ELSE CBL NEST_STMT CBR 
            {
              IfThenStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.ifThen(c, s1, s2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("IFTHEN_STMT",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-8)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IFTHEN_STMT ::= IF COND_VAL CBL CBR ELSE CBL NEST_STMT CBR 
            {
              IfThenStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.ifThen(c, null, s2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("IFTHEN_STMT",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IFTHEN_STMT ::= IF COND_VAL CBL NEST_STMT CBR ELSE CBL CBR 
            {
              IfThenStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		 RESULT = Statement.ifThen(c, s1, null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("IFTHEN_STMT",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IFTHEN_STMT ::= IF COND_VAL CBL CBR ELSE CBL CBR 
            {
              IfThenStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		 RESULT = Statement.ifThen(c, null, null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("IFTHEN_STMT",21, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COND_VAL ::= COND 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		ConditionalStatement c = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = c; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_VAL",6, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COND_VAL ::= BL VAR BR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = c; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_VAL",6, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COND_VAL ::= BL BOOL BR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = c; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_VAL",6, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNDEF ::= DEF TYPE VAR BL PARAMDEF BR CBL NEST_STMT RET CBR 
            {
              FunctionDefStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.funDef(t, n, p, st, r); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("FUNDEF",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-9)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNDEF ::= DEF TYPE VAR BL PARAMDEF BR CBL RET CBR 
            {
              FunctionDefStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.funDefEmpty(t, n, p, r); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("FUNDEF",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-8)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNDEF ::= DEF TYPE VAR BL BR CBL NEST_STMT RET CBR 
            {
              FunctionDefStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-6)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.funDef(t, n, st, r); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("FUNDEF",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-8)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNDEF ::= DEF TYPE VAR BL BR CBL RET CBR 
            {
              FunctionDefStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.funDefEmpty(t, n, r); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("FUNDEF",19, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-7)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMDEF ::= TYPE VAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.paramDecl(t, v); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PARAMDEF",2, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMDEF ::= TYPE VAR COMMA PARAMDEF 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.paramDecl(t, v, p); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PARAMDEF",2, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAM ::= VAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.param(t); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PARAM",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAM ::= VAL COMMA PARAM 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.param(t, p); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PARAM",1, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RET ::= RETURN VAL STOP 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = r; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("RET",3, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCALL ::= VAR BL PARAM BR 
            {
              FunctionCallStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.fun(n, p); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("FUNCALL",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCALL ::= VAR BL BR 
            {
              FunctionCallStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		 RESULT = Statement.fun(n); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("FUNCALL",18, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINTCALL ::= PRINT BL EXPR BR STOP 
            {
              PrintCallStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		ExpressionStatement v = (ExpressionStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		 RESULT = Statement.print(v); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PRINTCALL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRINTCALL ::= PRINT COND STOP 
            {
              PrintCallStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		ConditionalStatement v = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.print(v); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PRINTCALL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRINTCALL ::= PRINT BL FUNCALL BR STOP 
            {
              PrintCallStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		FunctionCallStatement v = (FunctionCallStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		 RESULT = Statement.print(v); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PRINTCALL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRINTCALL ::= PRINT BL BR STOP 
            {
              PrintCallStatement RESULT =null;
		 RESULT = Statement.print(null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("PRINTCALL",20, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND ::= BL COND COND_OP COND BR 
            {
              ConditionalStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		ConditionalStatement e1 = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		ConditionalStatement e2 = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.cond(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND ::= BL COND COND_OP VAL BR 
            {
              ConditionalStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		ConditionalStatement e1 = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.cond(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND ::= BL VAL COND_OP COND BR 
            {
              ConditionalStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		ConditionalStatement e2 = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.cond(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND ::= BL VAL COND_OP VAL BR 
            {
              ConditionalStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.cond(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND",17, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND_OP ::= AND 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND_OP ::= OR 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND_OP ::= EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND_OP ::= NEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND_OP ::= GREATER 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND_OP ::= GREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND_OP ::= LEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND_OP ::= LESS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("COND_OP",4, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPR ::= CALC_MUL 
            {
              ExpressionStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.expr(e); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPR ::= EXPR PLUS VAL 
            {
              ExpressionStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		ExpressionStatement e1 = (ExpressionStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.expr(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPR ::= EXPR MINUS VAL 
            {
              ExpressionStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		ExpressionStatement e1 = (ExpressionStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.expr(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CALC_MUL ::= VAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.expr(e); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",7, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CALC_MUL ::= BL CALC_MUL BR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.expr(e); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",7, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CALC_MUL ::= CALC_MUL MUL VAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.expr(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",7, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CALC_MUL ::= CALC_MUL DIV VAL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = Statement.expr(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("CALC_MUL",7, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASSIGN ::= VAR EQUAL EXPR STOP 
            {
              AssignmentStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		ExpressionStatement e2 = (ExpressionStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.assgn(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASSIGN ::= VAR EQUAL FUNCALL STOP 
            {
              AssignmentStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		FunctionCallStatement e2 = (FunctionCallStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.assgn(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASSIGN ::= VAR EQUAL COND STOP 
            {
              AssignmentStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		ConditionalStatement e2 = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.assgn(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASSIGN ::= VAR ASSIGN_OP EXPR STOP 
            {
              AssignmentStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		ExpressionStatement e2 = (ExpressionStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.assgn(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASSIGN ::= VAR ASSIGN_OP FUNCALL STOP 
            {
              AssignmentStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		FunctionCallStatement e2 = (FunctionCallStatement)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.assgn(op, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN",15, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASSIGN_OP ::= PLUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN_OP",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASSIGN_OP ::= MINEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN_OP",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASSIGN_OP ::= DIVEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN_OP",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASSIGN_OP ::= MULEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = op; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("ASSIGN_OP",5, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECL ::= STRTYPE VAR EQUAL STR STOP 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.decl(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECL ::= STRTYPE VAR STOP 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.decl(t, e1, null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECL ::= NUMTYPE VAR EQUAL NUM STOP 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.decl(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECL ::= NUMTYPE VAR STOP 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.decl(t, e1, null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECL ::= BOOLTYPE VAR EQUAL BOOL STOP 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.decl(t, e1, e2); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-4)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECL ::= BOOLTYPE VAR STOP 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.elementAt(CUP$JParser$top-1)).value;
		 RESULT = Statement.decl(t, e1, null); 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("DECL",23, ((java_cup.runtime.Symbol)CUP$JParser$stack.elementAt(CUP$JParser$top-2)), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPE ::= STRTYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = t; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("TYPE",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE ::= NUMTYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = t; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("TYPE",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE ::= BOOLTYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = t; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("TYPE",0, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VAL ::= VAR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("VAL",8, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VAL ::= STR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = str; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("VAL",8, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VAL ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("VAL",8, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAL ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JParser$stack.peek()).value;
		 RESULT = n; 
              CUP$JParser$result = parser.getSymbolFactory().newSymbol("VAL",8, ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JParser$stack.peek()), RESULT);
            }
          return CUP$JParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JParser$do_action(
    int                        CUP$JParser$act_num,
    java_cup.runtime.lr_parser CUP$JParser$parser,
    java.util.Stack            CUP$JParser$stack,
    int                        CUP$JParser$top)
    throws java.lang.Exception
    {
              return CUP$JParser$do_action_part00000000(
                               CUP$JParser$act_num,
                               CUP$JParser$parser,
                               CUP$JParser$stack,
                               CUP$JParser$top);
    }
}

}
