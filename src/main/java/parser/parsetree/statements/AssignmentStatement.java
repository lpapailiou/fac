package parser.parsetree.statements;

import parser.parsetree.BinaryOperator;
import parser.parsetree.Component;
import parser.parsetree.Keyword;
import parser.parsetree.UnaryOperator;
import parser.parsetree.instructions.UnaryExpression;
import parser.parsetree.interfaces.Visitor;

/**
 * This is a wrapper class for assignment statements.
 * Its instances will hold an assignment operator, an identifier and an assigned value.
 */
public class AssignmentStatement extends Component {

    private final BinaryOperator op;
    private final String identifier;
    private final Object value;

    /**
     * This constructor will instantiate a wrapper for an assignment statement.
     *
     * @param op         the binary operator.
     * @param identifier the identifier of the variable.
     * @param value      the value to be assigned.
     * @param left       the start index.
     * @param right      the end index.
     */
    public AssignmentStatement(Object op, Object identifier, Object value, int left, int right) {
        super(left, right);
        this.op = BinaryOperator.getByLiteral(op.toString());
        this.identifier = identifier.toString();
        this.value = value;
    }

    /**
     * Returns the identifier of the variable.
     *
     * @return the identifier.
     */
    public String getIdentifier() {
        return identifier;
    }

    /**
     * Returns the binary operator of this variable assignment.
     *
     * @return the operator.
     */
    public BinaryOperator getOperator() {
        return op;
    }

    /**
     * Returns the value to be assigned to the variable.
     *
     * @return the value.
     */
    public Object getValue() {
        return value;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        if (value instanceof UnaryExpression && (((UnaryExpression) value).getOperator() == UnaryOperator.INC || ((UnaryExpression) value).getOperator() == UnaryOperator.DEC)) {
            return value.toString() + ";\n";
        }
        return identifier + " " + op.getLiteral() + " " + value + ";\n";
    }

    /**
     * This method returns the assignment statement as representation of the parse tree.
     *
     * @return a snipped of the parse tree.
     */
    @Override
    public String getParseTree() {
        StringBuilder out = getStringBuilder(this);
        appendIdentifier(out, identifier, 1);
        appendLine(out, "AssignmentOperator", 1);
        appendBinOp(out, op, 2);
        appendBinOp(out, BinaryOperator.EQUAL, 1);
        evaluateExpression(out, value, 1);
        appendKeyword(out, Keyword.STOP, 1);
        return out.toString();
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     *
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }
}
