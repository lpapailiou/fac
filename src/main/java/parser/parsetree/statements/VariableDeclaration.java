package parser.parsetree.statements;

import parser.parsetree.BinaryOperator;
import parser.parsetree.Component;
import parser.parsetree.Keyword;
import parser.parsetree.Type;
import parser.parsetree.interfaces.Declaration;
import parser.parsetree.interfaces.Visitor;

/**
 * This is a wrapper class for variable declarations.
 * It holds the data type of the variable, the identifier and a value.
 * During initialization, the initialized value will be stored, which will allow to run parts of the code -
 * or the whole code - multiple times.
 */
public class VariableDeclaration extends Component implements Declaration {

    private final Type type;
    private final String identifier;
    private Object value;
    private Object initValue;
    private boolean initializedWithValue;

    /**
     * This constructor will create a wrapper for a variable declaration without initial value.
     * The value of the declared variable will be initialized to the default value of the according data type.
     *
     * @param type       the data type.
     * @param identifier the identifier.
     * @param left       the start index.
     * @param right      the end index.
     */
    public VariableDeclaration(Object type, String identifier, int left, int right) {
        super(left, right);
        this.type = Type.getByLiteral(type);
        this.identifier = identifier;
        this.value = Type.getByLiteral(type).getDefaultValue();
        this.initValue = value;
    }

    /**
     * This constructor will create a wrapper for a variable declaration.
     *
     * @param type       the data type.
     * @param identifier the identifier.
     * @param value      the value to be assigned initially.
     * @param left       the start index.
     * @param right      the end index.
     */
    public VariableDeclaration(Object type, String identifier, Object value, int left, int right) {
        this(type, identifier, left, right);
        this.value = value;
        this.initValue = value;
        this.initializedWithValue = true;
    }

    /**
     * Returns the data type of this variable declaration.
     *
     * @return the data type.
     */
    @Override
    public Type getType() {
        return type;
    }

    /**
     * Returns the identifier of this variable declaration.
     *
     * @return the identifier.
     */
    @Override
    public String getIdentifier() {
        return identifier;
    }

    /**
     * Returns the value of this variable.
     *
     * @return the value.
     */
    @Override
    public Object getValue() {
        return value;
    }

    /**
     * Allows to set a new value to this variable.
     *
     * @param obj the value to set.
     */
    @Override
    public void setValue(Object obj) {
        this.value = obj;
    }

    /**
     * Resets the value of this variable to the initially initialized default value.
     */
    public void reset() {
        value = initValue;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        String out = type.getLiteral() + " " + identifier;
        if (initializedWithValue) {
            out += " = " + value;
        } else {
            out += ";";
        }
        return out + ";\n";
    }

    /**
     * This method returns the variable declaration as representation of the parse tree.
     *
     * @return a snipped of the parse tree.
     */
    @Override
    public String getParseTree() {
        StringBuilder out = getStringBuilder(this);
        appendType(out, type, 1);
        appendIdentifier(out, identifier, 1);
        if (initializedWithValue) {
            appendBinOp(out, BinaryOperator.EQUAL, 1);
            evaluateExpression(out, value, 1);
        }
        appendKeyword(out, Keyword.STOP, 1);
        return out.toString();
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     *
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }

}
