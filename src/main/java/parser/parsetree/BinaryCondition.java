package parser.parsetree;

/**
 * This is a wrapper class for binary conditional expressions.
 * Its instances will hold an assignment operator and two operands.
 */
public class BinaryCondition extends ConditionalExpression {

    private BinOp op;
    private Object operand1;
    private Object operand2;

    /**
     * This constructor will instantiate a wrapper for a binary conditional expression.
     * @param op the operator.
     * @param o1 the first operand.
     * @param o2 the second operand.
     */
    BinaryCondition(Object op, Object o1, Object o2) {
        this.operand1 = o1;
        this.operand2 = o2;
        this.op = BinOp.getName(op.toString());
    }

    /**
     * Returns the binary operator.
     * @return the operator.
     */
    public BinOp getOperator() {
        return op;
    }

    /**
     * Returns the first operand.
     * @return the first operand.
     */
    public Object getOperand1() {
        return operand1;
    }

    /**
     * Returns the second operand.
     * @return the second operand.
     */
    public Object getOperand2() {
        return operand2;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        if (op != null) {
            return "(" + operand1.toString() + " " + op.asString() + " " + operand2.toString() + ")";
        }
        return "(" + operand1.toString() + ")";
    }

}
