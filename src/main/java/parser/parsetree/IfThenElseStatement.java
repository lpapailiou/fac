package parser.parsetree;

import parser.parsetree.interfaces.Visitor;

import java.util.ArrayList;
import java.util.List;

/**
 * This is a wrapper class for if-then-else statements.
 * It holds one condition and two statement lists, one each for the if and the else body.
 */
public class IfThenElseStatement extends IfThenStatement {

    private List<Statement> statementListElse = new ArrayList<>();

    /**
     * This constructor will wrap the contents of an if-then-else statement. It will initialize the
     * if-then-statement as superclass first, then add the else statement list to this instance.
     * While the conditional statement is mandatory, nested statements are optional.
     *
     * @param condition      the conditional expression.
     * @param statementList1 the if-then statement list.
     * @param statementList2 the else statement list.
     */
    IfThenElseStatement(Object condition, Object statementList1, Object statementList2) {
        super(condition, statementList1);
        if (statementList2 != null) {
            this.statementListElse.addAll(((Statement) statementList2).getStatements());
        }
    }

    /**
     * Returns the statements of the if-then body.
     *
     * @return the if-then statement list.
     */
    public List<Statement> getIfStatements() {
        return super.getStatements();
    }

    /**
     * Returns the statements of the else body.
     *
     * @return the else statement list.
     */
    public List<Statement> getElseStatements() {
        List<Statement> statements = new ArrayList<>();
        if (!statementListElse.isEmpty()) {
            statements.addAll(statementListElse);
        }
        return statements;
    }

    /**
     * Returns the combined statements of the if-then and the else body.
     *
     * @return the complete statement list.
     */
    @Override
    public List<Statement> getStatements() {
        List<Statement> statements = super.getStatements();
        if (!statementListElse.isEmpty()) {
            statements.addAll(statementListElse);
        }
        return statements;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        String out = "\nif ";
        boolean isCond = condition instanceof ConditionalExpression;
        if (!isCond) {
            out += "(";
        }
        out += condition;
        if (!isCond) {
            out += ")";
        }
        out += " {\n";
        if (!statementList1.isEmpty()) {
            for (Statement st : statementList1) {
                out += "\t" + st;
            }
        }

        if (!statementListElse.isEmpty()) {
            out += "} else { \n";
            for (Statement st : statementListElse) {
                out += "\t" + st;
            }
        }
        out += "}\n\n";
        return out;
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     *
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }
}
