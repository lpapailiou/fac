package parser.parsetree;

import parser.parsetree.interfaces.Visitor;

import java.util.ArrayList;
import java.util.List;

/**
 * This is a wrapper class for print call statements.
 * An instance holds a value, which will be a chain of arguments.
 */
public class PrintCallStatement extends Statement {


    private Object value;

    public PrintCallStatement(Object value) {
        this.value = value;
    }

    public Object getValue() {
        return value;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        if (value != null) {
            String out = "print(" + value.toString();
            if (value instanceof FunctionCallStatement) {
                out = out.substring(0, out.length()-2);
            }
            out += ");\n";
            return out;
        }
        return "print();\n";
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }

}
