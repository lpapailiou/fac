package parser.parsetree;

import parser.parsetree.interfaces.Visitor;

import java.util.Arrays;
import java.util.List;

/**
 * This is a wrapper class for print call statements.
 * An instance holds a value, which will be a chain of arguments.
 */
public class PrintCallStatement extends Component {


    private Object value;

    /**
     * This constructor will create an empty wrapper for a print statement.
     */
    public PrintCallStatement() {
    }

    /**
     * This constructor will wrap an object to be printed to the console.
     * This object can be a 'primitive', an expression or a statement, but cannot be multiple statements.
     *
     * @param value the value to print.
     */
    public PrintCallStatement(Object value) {
        this.value = value;
    }

    /**
     * Returns the value to be printed to the console.
     *
     * @return the value to print.
     */
    public Object getValue() {
        return value;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        if (value != null) {
            String out = "print(" + value.toString();
            if (value instanceof FunctionCallStatement) {
                out = out.substring(0, out.length() - 2);
            }
            out += ");\n";
            return out;
        }
        return "print();\n";
    }

    /**
     * This method returns the print call statement as representation of the parse tree.
     *
     * @return a snipped of the parse tree.
     */
    @Override
    public String getParseTree() {
        String out = this.getClass().getName();
        out = "+ " + out.substring(out.lastIndexOf(".") + 1) + "\n";
        if (value instanceof Component) {
            List<String> components = Arrays.asList(((Component) value).getParseTree().split("\n"));
            for (String str : components) {
                out += "\t " + str + "\n";
            }
        } else {
            out += "\t+ " + Type.getTypeForValue(value) + "\n";
        }
        return out;
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     *
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }

}
