package parser.parsetree;

import parser.parsetree.interfaces.Visitor;

import java.util.ArrayList;
import java.util.List;

/**
 * This is a wrapper class for if-then statements.
 * It holds one condition and the statement list, and may be used as component for an if-then-else statement.
 */
public class IfThenStatement extends Statement {

    protected Object condition;
    protected List<Statement> statementList1 = new ArrayList<>();

    /**
     * This constructor will wrap an if-then statement.
     * While the conditional statement is mandatory, nested statements are optional.
     *
     * @param condition      the conditional expression.
     * @param statementList1 the statement list for the if-then body.
     */
    public IfThenStatement(Object condition, Object statementList1) {
        this.condition = condition;
        if (statementList1 != null) {
            this.statementList1.addAll(((Statement) statementList1).getStatements());
        }
    }

    /**
     * Returns the conditional expression.
     *
     * @return the conditional expression.
     */
    public Object getCondition() {
        return condition;
    }

    /**
     * Returns the statement list of the if-else body.
     *
     * @return the statement list.
     */
    @Override
    public List<Statement> getStatements() {
        List<Statement> statements = new ArrayList<>();
        if (!statementList1.isEmpty()) {
            statements.addAll(statementList1);
        }
        return statements;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        String out = "\nif ";
        boolean isCond = condition instanceof ConditionalExpression;
        if (!isCond) {
            out += "(";
        }
        out += condition;
        if (!isCond) {
            out += ")";
        }
        out += " {\n";
        if (!statementList1.isEmpty()) {
            for (Statement st : statementList1) {
                out += "\t" + st;
            }
        }

        out += "}\n\n";
        return out;
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     *
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }
}
