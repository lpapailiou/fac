package parser.parsetree;

import parser.parsetree.interfaces.Visitor;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * This is a wrapper class for if-then statements.
 * It holds one condition and the statement list, and may be used as component for an if-then-else statement.
 */
public class IfThenStatement extends Component {

    protected Component condition;
    protected List<Component> componentListIf = new ArrayList<>();

    /**
     * This constructor will wrap an if-then statement.
     * While the conditional statement is mandatory, nested statements are optional.
     *
     * @param condition      the conditional expression.
     * @param statementList1 the statement list for the if-then body.
     * @param left           the start index.
     * @param right          the end index.
     */
    public IfThenStatement(Component condition, Object statementList1, int left, int right) {
        super(left, right);
        this.condition = condition;
        if (statementList1 != null) {
            this.componentListIf.addAll(((Component) statementList1).getStatements());
        }
    }

    /**
     * Returns the conditional expression.
     *
     * @return the conditional expression.
     */
    public Component getCondition() {
        return condition;
    }

    /**
     * Returns the statement list of the if-else body.
     *
     * @return the statement list.
     */
    @Override
    public List<Component> getStatements() {
        List<Component> components = new ArrayList<>();
        if (!componentListIf.isEmpty()) {
            components.addAll(componentListIf);
        }
        return components;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        StringBuilder out = new StringBuilder("\nif ");
        out.append(condition);
        out.append(" {\n");
        List<String> componentStrings = new ArrayList<>();
        for (Component st : componentListIf) {
            componentStrings.addAll(Arrays.asList(st.toString().split("\n")));
        }
        for (String str : componentStrings) {
            out.append(PRETTY_PRINT_INDENT).append(str).append("\n");
        }
        out.append("}\n\n");
        return out.toString();
    }

    /**
     * This method returns the if-then statement as representation of the parse tree.
     *
     * @return a snipped of the parse tree.
     */
    @Override
    public String getParseTree() {
        StringBuilder out = getStringBuilder(this);
        appendKeyword(out, Keyword.IF, 1);
        appendLine(out, "Condition", 1);
        appendNestedComponents(out, condition, 2);
        appendKeyword(out, Keyword.CBL, 1);
        appendNestedStatements(out, componentListIf, 1);
        appendKeyword(out, Keyword.CBR, 1);
        return out.toString();
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     *
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }
}
