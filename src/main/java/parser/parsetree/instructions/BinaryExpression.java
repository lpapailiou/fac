package parser.parsetree.instructions;


/**
 * This is a wrapper class for binary expressions.
 * Its instances will hold an assignment operator and two operands.
 */
public class BinaryExpression extends BinaryExpr {

    /**
     * This constructor will instantiate a wrapper for a binary expression.
     *
     * @param op       the operator.
     * @param operand1 the first operand.
     * @param operand2 the second operand.
     * @param left     the start index.
     * @param right    the end index.
     */
    public BinaryExpression(Object op, Object operand1, Object operand2, int left, int right) {
        super(op, operand1, operand2, left, right);
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        String out = getOperand1().toString();
        out += " " + getOperator().getLiteral() + " " + getOperand2().toString();
        return out;
    }

    /**
     * This method returns the binary expression as representation of the parse tree.
     *
     * @return a snipped of the parse tree.
     */
    @Override
    public String getParseTree() {
        StringBuilder out = getStringBuilder(this);
        evaluateExpression(out, getOperand1(), 1);
        appendBinOp(out, getOperator(), 1);
        evaluateExpression(out, getOperand2(), 1);
        return out.toString();
    }

}