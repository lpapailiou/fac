package parser.parsetree.instructions;

import parser.parsetree.interfaces.ConditionalExpression;

/**
 * This is a wrapper class for unary conditional expressions.
 * Its instances will hold an assignment operator and an operand.
 */
public class UnaryCondition extends UnaryExpr implements ConditionalExpression {

    /**
     * This constructor will instantiate a wrapper for a unary conditional expression.
     *
     * @param operator the operator.
     * @param operand  the operand.
     * @param left     the start index.
     * @param right    the end index.
     */
    public UnaryCondition(Object operator, Object operand, int left, int right) {
        super(operator, operand, left, right);
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        return getOperator().getLiteral() + getOperand().toString();
    }

    /**
     * This method returns the unary condition as representation of the parse tree.
     *
     * @return a snipped of the parse tree.
     */
    @Override
    public String getParseTree() {
        StringBuilder out = getStringBuilder(this);
        appendUnOp(out, getOperator(), 1);
        appendNestedComponents(out, getOperand(), 1);
        return out.toString();
    }

}
