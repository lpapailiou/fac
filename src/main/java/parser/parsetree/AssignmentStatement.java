package parser.parsetree;

import parser.parsetree.interfaces.Visitor;

import java.util.ArrayList;
import java.util.List;

/**
 * This is a wrapper class for assignment statements.
 * Its instances will hold an assignment operator, an identifier and an assigned value.
 */
public class AssignmentStatement extends Statement {

    private BinOp op;
    private String identifier;
    private Object value;

    public AssignmentStatement(Object op, Object identifier, Object value) {
        this.op = BinOp.getName(op.toString());
        this.identifier = identifier.toString();
        this.value = value;
    }

    public String getIdentifier() {
        return identifier;
    }

    public BinOp getOperator() {
        return op;
    }

    public Object getValue() {
        return value;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        return identifier + " " + op.asString() + " " + value + ";\n";
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }
}
