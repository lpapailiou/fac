package parser.parsetree;

import parser.parsetree.interfaces.Visitor;

import java.util.Arrays;
import java.util.List;

/**
 * This is a wrapper class for assignment statements.
 * Its instances will hold an assignment operator, an identifier and an assigned value.
 */
public class AssignmentStatement extends Component {

    private BinOp op;
    private String identifier;
    private Object value;

    /**
     * This constructor will instantiate a wrapper for an assignment statement.
     *
     * @param op         the binary operator.
     * @param identifier the identifier of the variable.
     * @param value      the value to be assigned.
     */
    public AssignmentStatement(Object op, Object identifier, Object value) {
        this.op = BinOp.getName(op.toString());
        this.identifier = identifier.toString();
        this.value = value;
    }

    /**
     * Returns the identifier of the variable.
     *
     * @return the identifier.
     */
    public String getIdentifier() {
        return identifier;
    }

    /**
     * Returns the binary operator of this variable assignment.
     *
     * @return the operator.
     */
    public BinOp getOperator() {
        return op;
    }

    /**
     * Returns the value to be assigned to the variable.
     *
     * @return the value.
     */
    public Object getValue() {
        return value;
    }

    /**
     * The toString method provides a pretty-printable String
     * of this parse tree component.
     * It is generated by the contents of this instance and may not be equal to the original code.
     *
     * @return the pretty-printed code.
     */
    @Override
    public String toString() {
        return identifier + " " + op.asString() + " " + value + ";\n";
    }

    /**
     * This method returns the assignment statement as representation of the parse tree.
     *
     * @return a snipped of the parse tree.
     */
    @Override
    public String getParseTree() {
        String out = this.getClass().getName();
        out = "+ " + out.substring(out.lastIndexOf(".") + 1) + "\n";
        out += "\t+ " + "IDENTIFIER" + "\n\t+ " + "OPERATOR" + "\n";
        if (value instanceof Component) {
            List<String> components = Arrays.asList(((Component) value).getParseTree().split("\n"));
            for (String str : components) {
                out += "\t" + str + "\n";
            }
        } else {
            out += "\t+ " + Type.getTypeForValue(value) + "\n";
        }
        return out;
    }

    /**
     * This method accepts a visitor. The visitor will then have access to this instance
     * for code validation and execution.
     *
     * @param visitor the visitor to accept.
     */
    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }
}
