package parser;
import parser.parsetree.*;
import java_cup.runtime.Symbol;
import scanner.JScanner;
import java.util.*;

// ************* CUSTOM PARSER CODE *************

parser code {:
    /**
     * Custom constructor which takes a reader. It will initialize a JScanner instance directly.
     * @param in the java.io.Reader.
     */
    public JParser(java.io.Reader in) {super(new JScanner(in));}

    /**
     * Custom constructor which takes a reader. It will initialize a JScanner instance directly.
     * @param in the java.io.Reader.
     * @param verbose a boolean to set the JScanner verbose attribute.
     */
    public JParser(java.io.Reader in, boolean verbose) {super(new JScanner(in, verbose));}

    /**
     * With this method, the custom log of the scanner can be passed to an outside class.
     * @return the scanner log.
     */
    public List<String> getScannerOutput() {
        return ((JScanner) getScanner()).getOutput();
    }

    /**
     * This method returns the current token of the scanning process.
     * @return the current token.
     */
    public Symbol getCurrentToken() {
            return cur_token;
    }
:}

// definition of scanner connection
scan with {: return getScanner().next_token(); :};

// ************* TERMINAL AND NONTERMINAL DECLARATION & CONFIGURATION *************

// zerminals (tokens returned by the scanner)
terminal            WHILE, IF, ELSE, DEF, PRINT, BREAK, RETURN,
                    BL, BR, CBL, CBR, COMMA, STOP,
                    EQUAL, LESS, GREATER, PLUS, MINUS, MUL, DIV, EQ, NEQ, GREQ, LEQ, AND, OR, PLUSEQ, MINEQ, MULEQ, DIVEQ, MODEQ, MOD, EXCL, INC, DEC;
terminal String     STR, STRTYPE, NUM, NUMTYPE, BOOL, BOOLTYPE, VAR;

// non terminals
non terminal        TYPE, PARAM, PARAMDEF, RET,
                    COND_OP, ASSIGN_OP, COND_VAL,
                    CALC_MUL, VAL;

non terminal Program                    PROGRAM;
non terminal List<Component>            STMT_LIST;
non terminal Component                  STMT, PROG_STMT, NEST_STMT, EXPR;
non terminal AssignmentStatement        ASSIGN;
non terminal ConditionalExpression      COND;
non terminal FunctionCallStatement      FUNCALL;
non terminal FunctionDefStatement       FUNDEF;
non terminal PrintCallStatement         PRINTCALL;
non terminal IfThenStatement            IFTHEN_STMT;
non terminal WhileStatement             WHILE_STMT;
non terminal VariableDeclaration        DECL;

// precedences - not really required, but nice to have
precedence left PLUS, MINUS;
precedence left MOD, MUL, DIV;

// start symbol (root of parse tree)
start with PROGRAM;

// ************* SYNTACTICAL RULES *************

PROGRAM         ::= STMT_LIST:s                                                             {: RESULT = Component.prog(s); :}
                    ;

STMT_LIST       ::= STMT_LIST:sl PROG_STMT:s                                                {: sl.add((Component) s); RESULT = sl; :}
                    | /* empty STMT_LIST */                                                 {: RESULT = Component.stmtList(); :}
                    ;

PROG_STMT       ::= STMT:st                                                                 {: RESULT = st; :}
                    | FUNDEF:st                                                             {: RESULT = st; :}
                    ;

NEST_STMT       ::= STMT:st                                                                 {: RESULT = Component.nest(st); :}
                    | STMT:st NEST_STMT:stList                                              {: RESULT = Component.nest(st, stList); :}
                    ;

STMT            ::= DECL:st                                                                 {: RESULT = st; :}
                    | ASSIGN:st                                                             {: RESULT = st; :}
                    | FUNCALL:st STOP                                                       {: RESULT = st; :}
                    | PRINTCALL:st                                                          {: RESULT = st; :}
                    | IFTHEN_STMT:st                                                        {: RESULT = st; :}
                    | WHILE_STMT:st                                                         {: RESULT = st; :}
                    | BREAK:br STOP:st                                                      {: RESULT = Component.brk(brleft, stright); :}
                    ;

WHILE_STMT      ::= WHILE:w COND_VAL:c CBL NEST_STMT:s CBR:st                               {: RESULT = Component.loop(c, s, wleft, stright, cleft, cright); :}
                    | WHILE:w COND_VAL:c CBL CBR:st                                         {: RESULT = Component.loop(c, null, wleft, stright, cleft, cright); :}
                    ;

IFTHEN_STMT     ::= IF:i COND_VAL:c CBL NEST_STMT:s CBR:st                                  {: RESULT = Component.ifThen(c, s, ileft, stright, cleft, cright); :}
                    | IF:i COND_VAL:c CBL CBR:st                                            {: RESULT = Component.ifThen(c, null, ileft, stright, cleft, cright); :}
                    | IF:i COND_VAL:c CBL NEST_STMT:s1 CBR ELSE CBL NEST_STMT:s2 CBR:st     {: RESULT = Component.ifThen(c, s1, s2, ileft, stright, cleft, cright); :}
                    | IF:i COND_VAL:c CBL CBR ELSE CBL NEST_STMT:s2 CBR:st                  {: RESULT = Component.ifThen(c, null, s2, ileft, stright, cleft, cright); :}
                    | IF:i COND_VAL:c CBL NEST_STMT:s1 CBR ELSE CBL CBR:st                  {: RESULT = Component.ifThen(c, s1, null, ileft, stright, cleft, cright); :}
                    | IF:i COND_VAL:c CBL CBR ELSE CBL CBR:st                               {: RESULT = Component.ifThen(c, null, null, ileft, stright, cleft, cright); :}
                    ;

COND_VAL        ::= COND:c                                                                  {: RESULT = c; :}
                    | BL VAL:c BR                                                           {: RESULT = c; :}
                    ;

// function definition
FUNDEF 	        ::= DEF:d TYPE:t VAR:n BL PARAMDEF:p BR CBL NEST_STMT:st RET:r CBR:c        {: RESULT = Component.funDef(t, n, p, st, r, dleft, cright); :}
                    | DEF:d TYPE:t VAR:n BL PARAMDEF:p BR CBL RET:r CBR:c                   {: RESULT = Component.funDefEmpty(t, n, p, r, dleft, cright); :}
                    | DEF:d TYPE:t VAR:n BL BR CBL NEST_STMT:st RET:r CBR:c                 {: RESULT = Component.funDef(t, n, st, r, dleft, cright); :}
                    | DEF:d TYPE:t VAR:n BL BR CBL RET:r CBR:c                              {: RESULT = Component.funDefEmpty(t, n, r, dleft, cright); :}
                    ;

PARAMDEF 	    ::= TYPE:t VAR:v                                                            {: RESULT = Component.paramDecl(t, v, tleft, vright); :}
                    | TYPE:t VAR:v COMMA PARAMDEF:p                                         {: RESULT = Component.paramDecl(t, v, p, tleft, pright); :}
                    ;

PARAM 	        ::= EXPR:t                                                                  {: RESULT = Component.param(t, tleft, tright); :}
                    | EXPR:t COMMA PARAM:p                                                  {: RESULT = Component.param(t, p, tleft, pright); :}
                    ;

RET 	        ::= RETURN EXPR:r STOP                                                      {: RESULT = r; :}
                    ;

// function calls
FUNCALL 	    ::= VAR:n BL PARAM:p BR:b                                                   {: RESULT = Component.fun(n, p, nleft, bright); :}
                    | VAR:n COND:p                                                          {: RESULT = Component.fun(n, p, nleft, pright); :}
                    | VAR:n BL BR:b                                                         {: RESULT = Component.fun(n, nleft, bright); :}
                    ;

PRINTCALL 	    ::= PRINT:pr BL EXPR:v BR STOP:st                                           {: RESULT = Component.print(v, prleft, stright); :}
                    | PRINT:pr COND:v STOP:st                                               {: RESULT = Component.print(v, prleft, stright); :}
                    | PRINT:pr BL BR STOP:st                                                {: RESULT = Component.print(prleft, stright); :}
                    ;

// boolean conditions. brackets are mandatory, no precedence order needed
COND 	        ::= BL:a EXPR:e1 COND_OP:op EXPR:e2 BR:b                                    {: RESULT = Component.cond(op, e1, e2, aleft, bright); :}
                   ;

COND_OP         ::= AND:op                                                                  {: RESULT = op; :}
                    | OR:op                                                                 {: RESULT = op; :}
                    | EQ:op                                                                 {: RESULT = op; :}
                    | NEQ:op                                                                {: RESULT = op; :}
                    | GREATER:op                                                            {: RESULT = op; :}
                    | GREQ:op                                                               {: RESULT = op; :}
                    | LEQ:op                                                                {: RESULT = op; :}
                    | LESS:op                                                               {: RESULT = op; :}
                    ;

// arithmetic expressions. brackets are optional, mul/div has precedence over plus/minus
EXPR 	        ::=  CALC_MUL:e                                                             {: RESULT = Component.constnt(e, eleft, eright); :}
                    | EXPR:e1 PLUS:op CALC_MUL:e2                                           {: RESULT = Component.expr(op, e1, e2, e1left, e2right); :}
                    | EXPR:e1 MINUS:op CALC_MUL:e2                                          {: RESULT = Component.expr(op, e1, e2, e1left, e2right); :}
                    ;

CALC_MUL        ::= VAL:e                                                                   {: RESULT = e; :}
                    | CALC_MUL:e1 MUL:op VAL:e2                                             {: RESULT = Component.expr(op, e1, e2, e1left, e2right); :}
                    | CALC_MUL:e1 DIV:op VAL:e2                                             {: RESULT = Component.expr(op, e1, e2, e1left, e2right); :}
                    | CALC_MUL:e1 MOD:op VAL:e2                                             {: RESULT = Component.expr(op, e1, e2, e1left, e2right); :}
                    ;

// variable assignments
ASSIGN 	        ::= VAR:v ASSIGN_OP:op EXPR:e STOP:st                                       {: RESULT = Component.assgn(op, v, e, vleft, stright); :}
                    | VAR:v INC:op STOP:st                                                  {: RESULT = Component.assgn(op, v, vleft, stright); :}
                    | VAR:v DEC:op STOP:st                                                  {: RESULT = Component.assgn(op, v, vleft, stright); :}
                    ;

ASSIGN_OP       ::= EQUAL:op                                                                {: RESULT = op; :}
                    | PLUSEQ:op                                                             {: RESULT = op; :}
                    | MINEQ:op                                                              {: RESULT = op; :}
                    | DIVEQ:op                                                              {: RESULT = op; :}
                    | MULEQ:op                                                              {: RESULT = op; :}
                    | MODEQ:op                                                              {: RESULT = op; :}
                    ;

// variable declaration
DECL 	        ::= TYPE:t VAR:e1 STOP:st                                                   {: RESULT = Component.decl(t, e1, tleft, stright); :}
                    | TYPE:t VAR:e1 EQUAL EXPR:e2 STOP:st                                   {: RESULT = Component.decl(t, e1, e2, tleft, stright); :}
                    ;

// base components
TYPE            ::= STRTYPE:t                                                               {: RESULT = t; :}
                    | NUMTYPE:t                                                             {: RESULT = t; :}
                    | BOOLTYPE:t                                                            {: RESULT = t; :}
                    ;

VAL             ::= VAR:str                                                                 {: RESULT = str; :}
                    | STR:str                                                               {: RESULT = str; :}
                    | BOOL:b                                                                {: RESULT = b; :}
                    | NUM:n                                                                 {: RESULT = n; :}
                    | FUNCALL:f                                                             {: RESULT = f; :}
                    | COND:c                                                                {: RESULT = c; :}
                    | EXCL:op VAL:e                                                         {: RESULT = Component.cond(op, e, opleft, eright); :}
                    | MINUS:op VAL:e                                                        {: RESULT = Component.expr(op, e, opleft, eright); :}
                    ;
