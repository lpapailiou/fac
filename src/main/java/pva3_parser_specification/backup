/*
S 	            ::= FILE                    {: System.out.println(e); :}
                ;
*/
// file structure definition. a file must have a 'main call', with optional variable and function definitions. the order is given by the grammar
FILE 	        ::= MAINCALL NL_SPACE REP_FUNDEF                    {: System.out.println(e); :}
                    | REP_VARDEF NL_SPACE MAINCALL                    {: System.out.println(e); :}
                    | REP_VARDEF NL_SPACE MAINCALL NL_SPACE REP_FUNDEF                    {: System.out.println(e); :}
                    ;

// main call. at runtime, code within the main function should be executed java-like
MAINCALL 	    ::= MAIN BL BR SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println(e); :}
                    | MAIN BL BR SPACE CBL REP_STMT CBR NL_SPACE                    {: System.out.println(e); :}
                    | MAIN BL BR SPACE CBL NL_SPACE REP_STMT CBR                    {: System.out.println(e); :}
                    | MAIN BL BR SPACE CBL  REP_STMT CBR                    {: System.out.println(e); :}
                    | MAIN BL BR CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println(e); :}
                    | MAIN BL BR CBL REP_STMT CBR NL_SPACE                    {: System.out.println(e); :}
                    | MAIN BL BR CBL NL_SPACE REP_STMT CBR                    {: System.out.println(e); :}
                    | MAIN BL BR CBL REP_STMT CBR                    {: System.out.println(e); :}
                    ;
// function definitions. a function must have parameters and must return a string, number or boolean
REP_PARAMDEF 	::= TYPEDEF                    {: System.out.println("PARAMDEF"); :}
                    | TYPEDEF COMMA SPACE REP_PARAMDEF                    {: System.out.println("PARAMDEF"); :}
                    | TYPEDEF COMMA REP_PARAMDEF                    {: System.out.println("PARAMDEF"); :}
                    ;
TYPEDEF 	    ::= BOOLTYPE SPACE VAR                    {: System.out.println("PARAMDEF"); :}
                    | NUMTYPE SPACE VAR                    {: System.out.println("PARAMDEF"); :}
                    | STRTYPE SPACE VAR                    {: System.out.println("PARAMDEF"); :}
                    ;


REP_FUNDEF 	::= FUNDEF                    {: System.out.println("FUNDEF"); :}
                    | FUNDEF REP_FUNDEF                    {: System.out.println("FUNDEF"); :}
                    ;
FUNDEF 	    ::=       DEF SPACE TYPEDEF BL REP_PARAMDEF BR SPACE CBL NL_SPACE REP_STMT RET CBR NL_SPACE                    {: System.out.println("FUNDEF"); :}
                    | DEF SPACE TYPEDEF BL REP_PARAMDEF BR SPACE CBL NL_SPACE REP_STMT RET CBR                    {: System.out.println("FUNDEF"); :}
                    | DEF SPACE TYPEDEF BL REP_PARAMDEF BR SPACE CBL REP_STMT RET CBR NL_SPACE                    {: System.out.println("FUNDEF"); :}
                    | DEF SPACE TYPEDEF BL REP_PARAMDEF BR SPACE CBL REP_STMT RET CBR                    {: System.out.println("FUNDEF"); :}
                    ;
PARAM 	        ::= TYPE                                                        {: System.out.println("PARAM"); :}
                    | TYPE COMMA SPACE PARAM                                    {: System.out.println("PARAM"); :}
                    ;
FUNCALL 	    ::= VAR BL PARAM BR                    {: System.out.println("FUNCALL"); :}
                    ;

// this function should print the content of the variable to the console when called
PRINTCALL 	    ::= PRINT BL TYPE BR STOP                    {: System.out.println("PRINTCALL"); :}
                    ;

// structures (variable definitions and assignments, if-else, while, ...)
REP_STMT 	::= STMT                    {: System.out.println("STRUCT"); :}
                    | STMT REP_STMT                    {: System.out.println("STRUCT"); :}
                    ;
STMT 	    ::= ASSIGN
                    | PRINTCALL                                                      {: System.out.println("STRUCT"); :}
                    | VARDEF                                                             {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                   {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                   {: System.out.println("STRUCT"); :}
                    | IF EXPR CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR SPACE CBL NL_SPACE REP_STMT CBR SPACE ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR SPACE CBL NL_SPACE REP_STMT CBR SPACE ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                   {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR SPACE CBL NL_SPACE REP_STMT CBR ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR SPACE CBL NL_SPACE REP_STMT CBR ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR CBL NL_SPACE REP_STMT CBR SPACE ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR CBL NL_SPACE REP_STMT CBR SPACE ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR CBL NL_SPACE REP_STMT CBR ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF SPACE EXPR CBL NL_SPACE REP_STMT CBR ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR SPACE CBL NL_SPACE REP_STMT CBR SPACE ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR SPACE CBL NL_SPACE REP_STMT CBR SPACE ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR SPACE CBL NL_SPACE REP_STMT CBR ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR SPACE CBL NL_SPACE REP_STMT CBR ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR CBL NL_SPACE REP_STMT CBR SPACE ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR CBL NL_SPACE REP_STMT CBR SPACE ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR CBL NL_SPACE REP_STMT CBR ELSE SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | IF EXPR CBL NL_SPACE REP_STMT CBR ELSE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | WHILE SPACE EXPR SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | WHILE SPACE EXPR CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | WHILE EXPR SPACE CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    | WHILE EXPR CBL NL_SPACE REP_STMT CBR NL_SPACE                    {: System.out.println("STRUCT"); :}
                    ;


// variable definitions
REP_VARDEF 	::= VARDEF:e                                                    {: RESULT = e; :}
                    | VARDEF REP_VARDEF:e                                   {: RESULT = e; :}
                    ;